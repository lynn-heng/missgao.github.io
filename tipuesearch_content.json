{"pages":[{"title":"About","url":"http://www.missgao.net/pages/about.html","tags":"pages","text":"游走在通信圈的运维人员，写写shell、python，打打杂。 纯Archlinux用了两年了，linux相关接触的时间更长，但感觉还是什么都不会，算是个‘万金油'。没有真正拿得出手的技术，迷茫的蛰伏中。等候某人来拯救！"},{"title":"linux下防rm命令误删","url":"http://www.missgao.net/2016-prevent-rm-mistakenly-deleted.html","tags":"linux","text":"前几天在自己的机器上一时手误在一个工作目录 rm -f * 了一下，执行完就感觉不对，有种双11想剁手的冲动。好在这个工作目录中的文件不多，前段时间给其它人都分别发过，在邮件的附件中一个个找回了。但报着不怕出问题，但问题不能重复出的态度，决定找一个方法来避免以后的误犯。 一通GOOGLE后发现了一个方案：使用创建一个-i文件的方法 touch -- -i 该方案可以防止在-i文件所在目录下执行 rm -rf * ,因为在此*会被shell扩展为当前目录下的文件，而 -i 是rm参数（强制提醒），这时就不会直接将文件删掉了，当然也可以将rm给建个 rm -i 的别名（RHEL就是这么干的），但在自己的电脑上还是不时需要删除多个文件的，加完后自己操作不便，所以使用touch的方法还是很不错的。但该方法不能处理如下的情况： rm -rf ./* rm -rf /path/* 因为这时SHELL扩展出来的 -i 前面带有路径，已经不能被解析为参数了。 还有一个习惯要以后注意养成，就是将 -f 或 -rf 的参数放在rm命令的最后边，这样防止有时路径未输入完整时按了enter（话说我也曾有过这种经历） 先将平常自己经常用的目录中建起-i文件来，虽然有个-i文件对强迫症来说看着不太爽，但能防误rm我忍了。"},{"title":"PXE网络安装RHEL6","url":"http://www.missgao.net/2015-rhel6-pxe-install.html","tags":"linux","text":"首先，只是通过网络方式安装，并没有实现自动。因为以前一直使用U盘装服务器，近来U盘丢失，还没来得及买，但又有安装的需求，于是就使用了PXE进行了下网络安装，因为着急装，只是大致看了两个介绍文章及ARCH WIKI，也就没有专门去研究kickstart的自动了,后面有时间再专门研究下。 所需软件：dnsmasq,apache(nginx或其它http服务都成) 为什么是dnsmasq?因为它本身包含了TFTP、DHCP服务，PXE启动主要所需的东西都包含了。另外我以前装过dnsmasq来做本地DNS缓存服务，省得再去装TFTP和DHCP服务了。 大致逻辑： 支持PXE的网卡在启动时会首先向DHCP SERVER请求一个IP，同时会根据DHCP的选项请求一个引导文件及配置文件，在配置文件中可以设定内核位置。"},{"title":"exquilla 破解","url":"http://www.missgao.net/2015-crack-exquilla.html","tags":"software","text":"注册验证相关的算法都在components里面的一个DLL文件exquilla-beta-i686.dll（linux下是一个同名的.so文件），注册码的结构是： EX0,*@*,2015-03-19,80324c6d8724c3e4cd0111b51a5718ad 可以看到，注册码被用逗号分成了四个部分： 第一部分是注册类型，EX0是免费给的试用类型，我不知道EX1、EX2是什么情况，但试了下，EX1是可以用的 第二部分是邮件，*@*是免费给的60天试用的，这里要填有效的Exchange邮箱，可以在选项里Valid Emails里看到 第三部分是license过期日期。 第四部分是校验码，分别是前三个部分再加上356B4B5C算出来的MD5值。 例如，注册类型EX1、Exchange邮箱abc@missgao.com，到期日期2015-12-18，可以计算出MD5值为： MD5(EX1,abc@missgao.com,2015-12-18,356B4B5C)= d85f9f9e7d8c46bfb04956c2d471a736 用计算出的MD5值作为注册码的最后一部分即可注册成功。"},{"title":"awesome音量实现","url":"http://www.missgao.net/2014-awesome-volume.html","tags":"software","text":"自己实现了awesome的音量。没有使用网上的方法（大多是使用vicious，看了下它的代码，感觉不太合适），自己对着官方说明看了看，简单实现如图所示。 上面显示音量图标，目前是静音，如果不是静音则显示正常声音图标。 指向声音图标显示当前音量框，即使静音也显示，因为切换至非静音时就是这个音量；移出声音图标音量框消失。 使用静音键切换静音非静音，同时音量图标变化 使用声音增大缩小键显示音量框 下一步再做个电量显示，这样右上角的信息显示查不多了（内存、CPU之类的监控不想放那里，感觉占地儿），终级的把时间显示那边转成日历方式，并加上事件提醒（使用cal命令结果，不知是否能实现）"},{"title":"2038年问题","url":"http://www.missgao.net/2014-year2038.html","tags":"linux","text":"今天习惯性pacman -Syu.发现linux kernel出3.17了。 网上查了下3.17的新特性，发现有一项是解决2038年问题，以前只知2000年问题，于是查了一下，原来如此： 在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此\"time_t\"数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此\"time_t\"标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。 总的来说就是32位的老kernel可能会在2038年的1月19号出问题。"},{"title":"linux连接中文无线","url":"http://www.missgao.net/2014-connect2-cn-wifi.html","tags":"linux","text":"在客户的办公室连接内网，可这边的无线名称为中文，我试了下直接将对应中文写入配置文件（使用的netctl连接），结果不行。 又使用iw 的scan命令查询，得到的对应SSID是以\\x开始的16进制串，将对应的一串16进制设置进去报SSID太长，又是不行。 结果只有先用WINDOWS来连。网上查来查去，也没有找到相应的解决方案。 后来自己仔细想了下，问题应该出在编码上，我的locale设置的utf-8。中文无线名称的编码应该就是GB2312。后来就在编码上测试了很久，最终发现原来是很简单一件事： 我还是先建立了一个配置文件，SSID处正常填入中文。此时该文件为UTF8编码，再使用iconv进行编码转换(utf8 -> gb2312)，得到一个新的文件，使用此配置文件连接就直接成功了。如果不是使用netctl而是使用wpa_supplicant命令直接连接，那么将wpa_supplicant的配置文件存成或转换gb2312编码即可。"},{"title":"shell中的for循环疑问","url":"http://www.missgao.net/2014-shell-for.html","tags":"linux","text":"如下，循环时使用 s* 和 ls s* 还是有不同的，具体的原因有时间得慢慢研究（自己掌握的基础知识还是不扎实）。问题在于IFS，似乎s*本身直接被扩展出来是带引号（防止被解析出错），但经过ls s*后等于输出了一次引号也就不存在了。 先记录下以备后面研究。 [ victor@MISSGAO ~ ] $ touch ss \\ s1 [ victor@MISSGAO ~ ] $ ls -l s* -rw-r--r-- 1 victor users 835826 Sep 28 22:03 search.tgz -rwxr--r-- 1 victor users 472 Sep 23 16:51 ssh-expect -rw-r--r-- 1 victor users 506 Sep 28 15:00 ssh-passwd.conf -rw-r--r-- 1 victor users 0 Oct 9 21:53 ss s1 [ victor@MISSGAO ~ ] $ for file in s* ; do echo $file ; done search.tgz ssh-expect ssh-passwd.conf ss s1 [ victor@MISSGAO ~ ] $ for file in ` ls s* ` ; do echo $file ; done search.tgz ssh-expect ssh-passwd.conf ss s1"},{"title":"LINUX下个别软件破解记录","url":"http://www.missgao.net/2014-software-sn-creak.html","tags":"software","text":"SecureCRT： 因为记录密码、保存LOG、自带SFTP，可以自写脚本等功能，在LINUX下也还是喜欢使用。 使用16进制编辑器（比如hexedit之类），将6e533e406a45f0b6372f3ea10717000c7120127cd915cef8ed1a3f2c5b替换为785782391ad0b9169f17415dd35f002790175204e3aa65ea10cff20818。之后随便找个注册机或注册码就可以注册了。 SecureFX： 使用16进制编辑器（比如hexedit之类），将c847abca184a6c5dfa47dc8efcd700019dc9df3743c640f50be307334fea替换为e02954a71cca592c855c91ecd4170001d6c606d38319cbb0deabebb05126。之后随便找个注册机或注册码就可以注册了。 Sublime Text Build 2221： 使用16进制编辑器（比如hexedit之类），将3342 3032替换为3242 3032。然后使用如下注册码： -----BEGIN LICENSE----- nemo.heng Unlimited User License EA7E-21455 18009210C245D7ED257C7DE27E6DBEAE 61D50E0DEE242AC0011705E868980175 86E2A8D9A1A174499D47ECBDD2423ED8 0E61B819F902723D413237F8887387E1 EC5F607AFD49D7CED0A20B91500C2E14 8233575F65C1BB7D27425CEBF7063B11 19DAA634EDF7DE1940433C89A273E52A 559239ED4E49383F0A2586041C510369 -----END LICENSE----- Sublime Text Build 3065： 直接使用下面三个LICENSE中的任意一个注册即可 ----- BEGIN LICENSE ----- Andrew Weber Single User License EA7E-855605 813A03DD 5E4AD9E6 6C0EEB94 BC99798F 942194A6 02396E98 E62C9979 4BB979FE 91424C9D A45400BF F6747D88 2FB88078 90F5CC94 1CDC92DC 8457107A F151657B 1D22E383 A997F016 42397640 33F41CFC E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D 5CDB7036 E56DE1C0 EFCC0840 650CD3A6 B98FC99C 8FAC73EE D2B95564 DF450523 ------ END LICENSE ------ ----- BEGIN LICENSE ----- K-20 Single User License EA7E-940129 3A099EC1 C0B5C7C5 33EBF0CF BE82FE3B EAC2164A 4F8EC954 4E87F1E5 7E4E85D6 C5605DE6 DAB003B4 D60CA4D0 77CB1533 3C47F579 FB3E8476 EB3AA9A7 68C43CD9 8C60B563 80FE367D 8CAD14B3 54FB7A9F 4123FFC4 D63312BA 141AF702 F6BBA254 B094B9C0 FAA4B04C 06CC9AFC FD412671 82E3AEE0 0F0FAAA7 8FA773C9 383A9E18 ------ END LICENSE ------ ----- BEGIN LICENSE ----- J2TeaM 2 User License EA7E-940282 45CB0D8F 09100037 7D1056EB A1DDC1A2 39C102C5 DF8D0BF0 FC3B1A94 4F2892B4 0AEE61BA 65758D3B 2EED551F A3E3478C C1C0E04E CA4E4541 1FC1A2C1 3F5FB6DB CFDA1551 51B05B5D 2D3C8CFE FA8B4285 051750E3 22D1422A 7AE3A8A1 3B4188AC 346372DA 37AA8ABA 6EB30E41 781BC81F B5CA66E3 A09DBD3A 3FE85BBD 69893DBD ------ END LICENSE ------ 另外，在我这里（archlinux|awesome)sublime text无法使用fcitx输入汉字,网上找的sublime_imfix.c编译后无效。最终找到的解决方案（如果有兴趣点进去看吧，全英的，我只看了个大概，英文不好的我就不去描述了）： 本人进行了简单整理 首先需要安装X11 和 Gtk2的开发包，然后： wget https://raw.githubusercontent.com/whitequark/sublime-imethod-fix/master/libsublime_text-xim-xcompose.c gcc -Wall -Werror -fPIC -shared -ldl ` pkg-config gtk+-2.0 --cflags --libs ` libsublime_text-xim-xcompose.c -o libsublime_text-xim-xcompose.so 此时可以得到libsublime_text-xim-xcompose.so文件，将其放置在特定目录下（目录不要有空格，我放置在了sublime目录下），设置两个环境变量。 export GTK_IM_MODULE = xim export LD_PRELOAD = $SUBLIMEHOME /libsublime_text-xim-xcompose.so $SUBLIMEHOME换成libsublime_text-xim-xcompose.so对应目录。之后再启动sublime_text就可以了。"},{"title":"firefox代理上网","url":"http://www.missgao.net/2014-firefox-proxy.html","tags":"software","text":"上网环境不理想，无法外网。好在发现了一台内网的机器可以连接外网，这样就可以用SSH隧道来外网了，因为不在一个网段，所以用外网那台机器做网关也实现不了。就用了代理的方式。 然而准备打开网页是又出问题了，因为域名无法解析打开网页还是存在问题，可能需要把能上外网的那台机器上装dns server了，然而毕竟那个机器不在我的管理之下，借之上网已属侥幸，再加装软件就有点不合适了。 网上搜索，竟然发现了FIREFOX的network.proxy.socks_remote_dns参数，该参数将域名传递给socks5服务器去解析，遂试之，果然可行。下面需要找下thunderbird下如何设了:)"},{"title":"我的LFS及BLFS","url":"http://www.missgao.net/2014-my-LFS-BLFS.html","tags":"linux","text":"忽然心血来潮又搞了一次LFS，记得以前搞过一次，已经五六年前了，当时只把LFS搞完BLFS不知如何下手，做的过程也只是全程按手册的命令走。 这次决定一次要把BLFS做完，搞出来一个可以达到日常应用的环境。 使用最新的LFS7.3｜BLFS6.3，然后开始了长达一周的LFS历程。 终于完成了，上成果图"},{"title":"在GitHub使用jekyll建站记录","url":"http://www.missgao.net/2013-jekyll-blog-on-github.html","tags":"linux","text":"LINUX下的安装命令 #aptitude install ruby ruby-dev #gem install jekyll #gem install rdiscount 安装rdiscount是因为默认的maruku对我写的md文档有些会报错，没心思研究为什么，换rdiscount解决了 WINDOWS install 不记得具体步骤了，网上搜一下windows jekyll会有大把的信息。记录下遇到的问题： 使用安装版的RubyInstaller，我用ZIP版的时间发生一个莫明其妙的问题 修改convertible.rb文件解决中文会出错，加入:encoding => \"utf-8\".参考路径C:\\Ruby\\lib\\ruby\\gems\\1.9.1\\gems\\jekyll-1.0.3\\lib\\jekyll self.content = File.read(File.join(base, name),:encoding => \"utf-8\") 建个站点 $ jekyll new sitename $ cd sitename $ jekyll server 现在可以在本机通过http://localhost:4000 查看效果了, 修改_config.yml，加入下面一行 markdown : rdiscount 让jettly使用rdiscount解析markdown文档 绑域名，我绑的是二级域名，按GitHub上的说明看顶域和二级域是不同的。 修改域名绑定，加入一个CNAME,值填对应的[youname].github.io GitHub项目中建立CNAME文件，填上要绑的二级域名"},{"title":"Debian wheezy 64位安装32位支持","url":"http://www.missgao.net/2013-64bit-debian-multiarch.html","tags":"linux","text":"wheezy 不像前些版本直接安装ia32-libs ia32-libs-gtk就可以，因为从wheezy开始搞了个Multiarch，具体的含义不是特别清楚，主要是英文不好，不过从debian的网站上还是看明白了命令。 以下列出方法 首先加入对应架构支持 dpkg --add-architecture i386 然后在源中加入对应架构，像我使用的163的源 deb [arch=amd64,i386] http://mirrors.163.com/debian/ wheezy main 再更新下 aptitude update 然后就可以安装ia32-libs了 aptitude install ia32-libs 在安装时可以看到一些包的后面多出了:i386字样"},{"title":"64位debian使用firefox","url":"http://www.missgao.net/2013-64bit-debian-firefox.html","tags":"linux","text":"主要解决相应wrong ELF class: ELFCLASS64错及插件异常 不多描述，直接放方法： 首先要有安装ia32-libs、lib32-libs-gtk，因为firefox只有32位的，但好像他默认是去读32位下对应的so文件，虽然我们装了32位Lib它也不去找。 说明下我的情况：我直接在mozilla上下载的firefox，然后放在了/usr/local下，这时启动firefox是要用完整路径才可以。 方法：创建/usr/local/bin/firefox，内容如下 #!/bin/bash -e export LD_LIBRARY_PATH = /usr/lib32: $LD_LIBRARY_PATH export GTK_PATH = /usr/lib32/gtk-2.0 /usr/local/firefox/firefox \" $@ \" 2> & 1 > /dev/null & 具体原因不再解释，懂的自然懂，不懂的解决问题即可 下面描述下flash插件问题： 我测试的情况如下，在adobe网站下载linux的64不可用。我纠结了一两天，后来下载了32位的竟然可以了。当然上面的步骤需要先做一下，上面的步骤如果没有进行也是可以启动firefox的，我是在处理支付宝密码输入控件时想到的，当时支付宝默认给我装的是64控件，结果也有报ELFCLASS64错，然后我将支付宝的控件也换做32的竟然可以了。 附：支付宝的控件默认会根据你的系统环境会安装控件，所以装的是64的，想装32的只需做一个简单的改动：得到对应安装文件先不要执行，而修改下，将里边删除\\~/.aliedit语句删除，然后前往\\~/.aliedit/install/lib下看，会看到一个64一个32的lib，对应复制到\\~/.mozilla/plugins下即可 补充说明——LINUX下可以直接用64位的FIREFOX，到下面这里找所需要的版本吧：ftp://ftp.mozilla.org/pub/firefox/releases/latest/linux-x86_64/"},{"title":"硬盘安装DEBIAN SQUEEZE 64BIT备忘","url":"http://www.missgao.net/2013-install-debian-disk.html","tags":"linux","text":"这不是一个安装手册，只是自己安装的一些重点项目记录 安装前的情况 软件：WIN7旗舰版-64bit EN + BT5双系统 硬件：LENOVO E46A 规划安装后情况： WIN7 64+DEBIAN 64，去除BT5. BT5下/home分区保留，安装完后修改debian的fstab再将/home挂载 所有常用软件放/usr/local,并将/home/local单独分区，防止再重装 下载DEBIAN 6.0 amd64,放在FAT32或LINUX格式分区下 http://cdimage.debian.org/debian-cd/6.0.6/amd64/iso-dvd/debian-6.0.6-amd64-DVD-1.iso 下载GRUB4DOS所用引导文件，3个全下，放任一位置，建议放C盘根下――boot.img.gz不知做什么用的 http://ftp.nl.debian.org/debian/dists/squeeze/main/installer-amd64/current/images/hd-media/ GRUB4DOS按C命令行,如果引导文件未放在C盘根下或安装有多块硬盘则需要改变(hd0,0) kernel (hd0,0)/vmlinuz initrd (hd0,0)/initrd.gz boot 引导不安装在/dev/sda上，而装在/dev/sdaX上，因为目前还是在WINDOWS上工作的多些，还是用WIN7的引导 安装只安装标准系统，其它的装好再说。 到这里已经装完了 下载安装nonfree的网卡驱动firmware-iwlwifi_0.28+squeeze1_all.deb，我以前装32位DEBIAN时就下过了，这个包不分32位和64位 dpkg -i firmware-iwlwifi_0.28+squeeze1_all.deb 添加ISO源,ROOT运行 mkdir /mnt/source mount -o loop /<ISOFILEPATH>/debian-6.0.6-amd64-DVD-1.iso /mnt/source echo file:///mnt/source squeeze main contrib > /etc/apt/source.list.d/ISO.list 安装一些软件，然后把ntfs3g装上（代码不写了） aptitude update aptitude install vim gcc make ia32-libs ia32-libs-gtk 安装图形 aptitude install xfce4 连接WPA2无线:家里的无线ESSID是隐藏的 aptitude install wireless-tools wpasupplicant wpa_passparse ESSID PWD > file ifconfig wlan0 up iwconfig wlan0 essid \"<ESSID>\" wpa_supplicant -Dwext -iwlan0 -c<file> 2> & 1 > /dev/null & dhclient wlan0 最后4句我做成了一个sh文件，以后就可以直接运行了 添加163源 echo deb http://mirrors.163.com/debian squeeze main contrib > /etc/apt/source.list.d/163.list echo deb http://mirrors.163.com/debian-backports squeeze-backports main contrib >> /etc/apt/source.list.d/163.list 第二行是为了装fcitx用，我平时只有基本的办公用，所以no-free没有加，万一有需要再加好了 安装WQY字体 aptitude install xfont-wqy 安装设置FCITX aptitude install fcitx-table-wubi fcitx-table-wbpy 我基本只用五笔，因为会自动依赖，所以就没把fcitx放进去 创建~/.xinitrc——将export那行加入.profile也可以,内容为 #!/bin/sh export LC_CTYPE = zh_CN.utf8 >> ~/.profile . /etc/X11/Xsession 我的locale是英文(自己EN太差，用这个方法强制学习了)，所以上面这一行一定要加，不然无法使用fcitx 安装OFFICE 赶上WPS for Linux出beta版了，就赶快下来用,下载.tar.gz包，因为WPS只有32位，所以还需要做一些操作： 下载最新的libstdc++6:http://packages.debian.org/wheezy/i386/libstdc++6/download ar vx <下载的deb文件> tar xvf data.tar.gz cp ./usr/lib/i386-linux-gnu/libstdc++.so.6.0.17 <WPS解包路径>/office6/libstdc++.so.6 挂载WINDOWS的C盘，然后将面下的字体复制到\\~/.fonts下 MTEXTRA.TTF simhei.ttf simsun.ttc webdings.ttf WINGDNG2.TTF simfang.ttf simkai.ttf symbol.ttf wingding.ttf WINGDNG3.TTF 先到这里了，附上一张近照。"}]}